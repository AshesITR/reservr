// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dist_mixture_density_free
arma::vec dist_mixture_density_free(const arma::vec x, const arma::mat params, bool log_p, const arma::uvec param_sizes, const Rcpp::List comp_densities, const arma::uvec is_discrete);
RcppExport SEXP _reservr_dist_mixture_density_free(SEXP xSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP param_sizesSEXP, SEXP comp_densitiesSEXP, SEXP is_discreteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type param_sizes(param_sizesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type comp_densities(comp_densitiesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type is_discrete(is_discreteSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_mixture_density_free(x, params, log_p, param_sizes, comp_densities, is_discrete));
    return rcpp_result_gen;
END_RCPP
}
// dist_mixture_density_fixed
arma::vec dist_mixture_density_fixed(const arma::vec x, const arma::mat params, bool log_p, const arma::uvec param_sizes, const Rcpp::List comp_densities, const arma::uvec is_discrete, const arma::vec probs);
RcppExport SEXP _reservr_dist_mixture_density_fixed(SEXP xSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP param_sizesSEXP, SEXP comp_densitiesSEXP, SEXP is_discreteSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type param_sizes(param_sizesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type comp_densities(comp_densitiesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type is_discrete(is_discreteSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_mixture_density_fixed(x, params, log_p, param_sizes, comp_densities, is_discrete, probs));
    return rcpp_result_gen;
END_RCPP
}
// dist_mixture_probability_free
arma::vec dist_mixture_probability_free(const arma::vec q, const arma::mat params, bool lower_tail, bool log_p, const arma::uvec param_sizes, const Rcpp::List comp_probabilities);
RcppExport SEXP _reservr_dist_mixture_probability_free(SEXP qSEXP, SEXP paramsSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP param_sizesSEXP, SEXP comp_probabilitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type param_sizes(param_sizesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type comp_probabilities(comp_probabilitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_mixture_probability_free(q, params, lower_tail, log_p, param_sizes, comp_probabilities));
    return rcpp_result_gen;
END_RCPP
}
// dist_mixture_probability_fixed
arma::vec dist_mixture_probability_fixed(const arma::vec q, const arma::mat params, bool lower_tail, bool log_p, const arma::uvec param_sizes, const Rcpp::List comp_probabilities, const arma::vec probs);
RcppExport SEXP _reservr_dist_mixture_probability_fixed(SEXP qSEXP, SEXP paramsSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP param_sizesSEXP, SEXP comp_probabilitiesSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type param_sizes(param_sizesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type comp_probabilities(comp_probabilitiesSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_mixture_probability_fixed(q, params, lower_tail, log_p, param_sizes, comp_probabilities, probs));
    return rcpp_result_gen;
END_RCPP
}
// dist_mixture_iprobability_free
arma::vec dist_mixture_iprobability_free(const arma::vec qmin, const arma::vec qmax, const arma::mat params, bool log_p, const arma::uvec param_sizes, const Rcpp::List comp_iprobabilities);
RcppExport SEXP _reservr_dist_mixture_iprobability_free(SEXP qminSEXP, SEXP qmaxSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP param_sizesSEXP, SEXP comp_iprobabilitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type param_sizes(param_sizesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type comp_iprobabilities(comp_iprobabilitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_mixture_iprobability_free(qmin, qmax, params, log_p, param_sizes, comp_iprobabilities));
    return rcpp_result_gen;
END_RCPP
}
// dist_mixture_iprobability_fixed
arma::vec dist_mixture_iprobability_fixed(const arma::vec qmin, const arma::vec qmax, const arma::mat params, bool log_p, const arma::uvec param_sizes, const Rcpp::List comp_iprobabilities, const arma::vec probs);
RcppExport SEXP _reservr_dist_mixture_iprobability_fixed(SEXP qminSEXP, SEXP qmaxSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP param_sizesSEXP, SEXP comp_iprobabilitiesSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type param_sizes(param_sizesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type comp_iprobabilities(comp_iprobabilitiesSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_mixture_iprobability_fixed(qmin, qmax, params, log_p, param_sizes, comp_iprobabilities, probs));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_density_free
arma::vec dist_erlangmix_density_free(const arma::vec x, const arma::mat params, bool log_p);
RcppExport SEXP _reservr_dist_erlangmix_density_free(SEXP xSEXP, SEXP paramsSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_density_free(x, params, log_p));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_density_fixed_shape
arma::vec dist_erlangmix_density_fixed_shape(const arma::vec x, const arma::mat params, bool log_p, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_density_fixed_shape(SEXP xSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_density_fixed_shape(x, params, log_p, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_density_fixed_scale
arma::vec dist_erlangmix_density_fixed_scale(const arma::vec x, const arma::mat params, bool log_p, const arma::vec scale);
RcppExport SEXP _reservr_dist_erlangmix_density_fixed_scale(SEXP xSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_density_fixed_scale(x, params, log_p, scale));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_density_fixed_probs
arma::vec dist_erlangmix_density_fixed_probs(const arma::vec x, const arma::mat params, bool log_p, const arma::vec probs);
RcppExport SEXP _reservr_dist_erlangmix_density_fixed_probs(SEXP xSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_density_fixed_probs(x, params, log_p, probs));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_density_fixed_probs_scale
arma::vec dist_erlangmix_density_fixed_probs_scale(const arma::vec x, const arma::mat params, bool log_p, const arma::vec probs, const arma::vec scale);
RcppExport SEXP _reservr_dist_erlangmix_density_fixed_probs_scale(SEXP xSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP probsSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_density_fixed_probs_scale(x, params, log_p, probs, scale));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_density_fixed_probs_shape
arma::vec dist_erlangmix_density_fixed_probs_shape(const arma::vec x, const arma::mat params, bool log_p, const arma::vec probs, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_density_fixed_probs_shape(SEXP xSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP probsSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_density_fixed_probs_shape(x, params, log_p, probs, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_density_fixed_scale_shape
arma::vec dist_erlangmix_density_fixed_scale_shape(const arma::vec x, const arma::mat params, bool log_p, const arma::vec scale, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_density_fixed_scale_shape(SEXP xSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP scaleSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_density_fixed_scale_shape(x, params, log_p, scale, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_density_fixed_probs_scale_shape
arma::vec dist_erlangmix_density_fixed_probs_scale_shape(const arma::vec x, bool log_p, const arma::vec probs, const arma::vec scale, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_density_fixed_probs_scale_shape(SEXP xSEXP, SEXP log_pSEXP, SEXP probsSEXP, SEXP scaleSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_density_fixed_probs_scale_shape(x, log_p, probs, scale, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_probability_free
arma::vec dist_erlangmix_probability_free(const arma::vec q, const arma::mat params, bool lower_tail, bool log_p);
RcppExport SEXP _reservr_dist_erlangmix_probability_free(SEXP qSEXP, SEXP paramsSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_probability_free(q, params, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_probability_fixed_shape
arma::vec dist_erlangmix_probability_fixed_shape(const arma::vec q, const arma::mat params, bool lower_tail, bool log_p, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_probability_fixed_shape(SEXP qSEXP, SEXP paramsSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_probability_fixed_shape(q, params, lower_tail, log_p, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_probability_fixed_scale
arma::vec dist_erlangmix_probability_fixed_scale(const arma::vec q, const arma::mat params, bool lower_tail, bool log_p, const arma::vec scale);
RcppExport SEXP _reservr_dist_erlangmix_probability_fixed_scale(SEXP qSEXP, SEXP paramsSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_probability_fixed_scale(q, params, lower_tail, log_p, scale));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_probability_fixed_probs
arma::vec dist_erlangmix_probability_fixed_probs(const arma::vec q, const arma::mat params, bool lower_tail, bool log_p, const arma::vec probs);
RcppExport SEXP _reservr_dist_erlangmix_probability_fixed_probs(SEXP qSEXP, SEXP paramsSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_probability_fixed_probs(q, params, lower_tail, log_p, probs));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_probability_fixed_probs_scale
arma::vec dist_erlangmix_probability_fixed_probs_scale(const arma::vec q, const arma::mat params, bool lower_tail, bool log_p, const arma::vec probs, const arma::vec scale);
RcppExport SEXP _reservr_dist_erlangmix_probability_fixed_probs_scale(SEXP qSEXP, SEXP paramsSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP probsSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_probability_fixed_probs_scale(q, params, lower_tail, log_p, probs, scale));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_probability_fixed_probs_shape
arma::vec dist_erlangmix_probability_fixed_probs_shape(const arma::vec q, const arma::mat params, bool lower_tail, bool log_p, const arma::vec probs, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_probability_fixed_probs_shape(SEXP qSEXP, SEXP paramsSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP probsSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_probability_fixed_probs_shape(q, params, lower_tail, log_p, probs, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_probability_fixed_scale_shape
arma::vec dist_erlangmix_probability_fixed_scale_shape(const arma::vec q, const arma::mat params, bool lower_tail, bool log_p, const arma::vec scale, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_probability_fixed_scale_shape(SEXP qSEXP, SEXP paramsSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP scaleSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_probability_fixed_scale_shape(q, params, lower_tail, log_p, scale, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_probability_fixed_probs_scale_shape
arma::vec dist_erlangmix_probability_fixed_probs_scale_shape(const arma::vec q, bool lower_tail, bool log_p, const arma::vec probs, const arma::vec scale, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_probability_fixed_probs_scale_shape(SEXP qSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP probsSEXP, SEXP scaleSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_probability_fixed_probs_scale_shape(q, lower_tail, log_p, probs, scale, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_iprobability_free
arma::vec dist_erlangmix_iprobability_free(const arma::vec qmin, const arma::vec qmax, const arma::mat params, bool log_p);
RcppExport SEXP _reservr_dist_erlangmix_iprobability_free(SEXP qminSEXP, SEXP qmaxSEXP, SEXP paramsSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_iprobability_free(qmin, qmax, params, log_p));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_iprobability_fixed_shape
arma::vec dist_erlangmix_iprobability_fixed_shape(const arma::vec qmin, const arma::vec qmax, const arma::mat params, bool log_p, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_iprobability_fixed_shape(SEXP qminSEXP, SEXP qmaxSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_iprobability_fixed_shape(qmin, qmax, params, log_p, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_iprobability_fixed_scale
arma::vec dist_erlangmix_iprobability_fixed_scale(const arma::vec qmin, const arma::vec qmax, const arma::mat params, bool log_p, const arma::vec scale);
RcppExport SEXP _reservr_dist_erlangmix_iprobability_fixed_scale(SEXP qminSEXP, SEXP qmaxSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_iprobability_fixed_scale(qmin, qmax, params, log_p, scale));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_iprobability_fixed_probs
arma::vec dist_erlangmix_iprobability_fixed_probs(const arma::vec qmin, const arma::vec qmax, const arma::mat params, bool log_p, const arma::vec probs);
RcppExport SEXP _reservr_dist_erlangmix_iprobability_fixed_probs(SEXP qminSEXP, SEXP qmaxSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_iprobability_fixed_probs(qmin, qmax, params, log_p, probs));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_iprobability_fixed_probs_scale
arma::vec dist_erlangmix_iprobability_fixed_probs_scale(const arma::vec qmin, const arma::vec qmax, const arma::mat params, bool log_p, const arma::vec probs, const arma::vec scale);
RcppExport SEXP _reservr_dist_erlangmix_iprobability_fixed_probs_scale(SEXP qminSEXP, SEXP qmaxSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP probsSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_iprobability_fixed_probs_scale(qmin, qmax, params, log_p, probs, scale));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_iprobability_fixed_probs_shape
arma::vec dist_erlangmix_iprobability_fixed_probs_shape(const arma::vec qmin, const arma::vec qmax, const arma::mat params, bool log_p, const arma::vec probs, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_iprobability_fixed_probs_shape(SEXP qminSEXP, SEXP qmaxSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP probsSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_iprobability_fixed_probs_shape(qmin, qmax, params, log_p, probs, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_iprobability_fixed_scale_shape
arma::vec dist_erlangmix_iprobability_fixed_scale_shape(const arma::vec qmin, const arma::vec qmax, const arma::mat params, bool log_p, const arma::vec scale, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_iprobability_fixed_scale_shape(SEXP qminSEXP, SEXP qmaxSEXP, SEXP paramsSEXP, SEXP log_pSEXP, SEXP scaleSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_iprobability_fixed_scale_shape(qmin, qmax, params, log_p, scale, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dist_erlangmix_iprobability_fixed_probs_scale_shape
arma::vec dist_erlangmix_iprobability_fixed_probs_scale_shape(const arma::vec qmin, const arma::vec qmax, bool log_p, const arma::vec probs, const arma::vec scale, const arma::vec shapes);
RcppExport SEXP _reservr_dist_erlangmix_iprobability_fixed_probs_scale_shape(SEXP qminSEXP, SEXP qmaxSEXP, SEXP log_pSEXP, SEXP probsSEXP, SEXP scaleSEXP, SEXP shapesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type shapes(shapesSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_erlangmix_iprobability_fixed_probs_scale_shape(qmin, qmax, log_p, probs, scale, shapes));
    return rcpp_result_gen;
END_RCPP
}
// dgamma_matrix
NumericMatrix dgamma_matrix(NumericVector x, NumericVector shape, double scale);
RcppExport SEXP _reservr_dgamma_matrix(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(dgamma_matrix(x, shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// pgamma_diff_matrix
NumericMatrix pgamma_diff_matrix(const NumericVector lower, const NumericVector upper, const NumericVector shape, const NumericVector scale);
RcppExport SEXP _reservr_pgamma_diff_matrix(SEXP lowerSEXP, SEXP upperSEXP, SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(pgamma_diff_matrix(lower, upper, shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// trunc_erlangmix_ellik
Rcpp::List trunc_erlangmix_ellik(const arma::vec& xmin, const arma::vec& xmax, const arma::vec& tmin, const arma::vec& tmax, const arma::vec& weight, const arma::vec& shapes, double scale, const arma::mat& zadj, bool parallel);
RcppExport SEXP _reservr_trunc_erlangmix_ellik(SEXP xminSEXP, SEXP xmaxSEXP, SEXP tminSEXP, SEXP tmaxSEXP, SEXP weightSEXP, SEXP shapesSEXP, SEXP scaleSEXP, SEXP zadjSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type shapes(shapesSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type zadj(zadjSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(trunc_erlangmix_ellik(xmin, xmax, tmin, tmax, weight, shapes, scale, zadj, parallel));
    return rcpp_result_gen;
END_RCPP
}
// do_integrate_gk_lst
Rcpp::List do_integrate_gk_lst(const Rcpp::Function& fun, const arma::vec& lower, const arma::vec& upper, const Rcpp::List& params, const double tolerance, const int max_iter, bool debug);
RcppExport SEXP _reservr_do_integrate_gk_lst(SEXP funSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP paramsSEXP, SEXP toleranceSEXP, SEXP max_iterSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type fun(funSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(do_integrate_gk_lst(fun, lower, upper, params, tolerance, max_iter, debug));
    return rcpp_result_gen;
END_RCPP
}
// do_integrate_gk_mat
Rcpp::List do_integrate_gk_mat(const Rcpp::Function& fun, const arma::vec& lower, const arma::vec& upper, const arma::mat& params, const double tolerance, const int max_iter, bool debug);
RcppExport SEXP _reservr_do_integrate_gk_mat(SEXP funSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP paramsSEXP, SEXP toleranceSEXP, SEXP max_iterSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type fun(funSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(do_integrate_gk_mat(fun, lower, upper, params, tolerance, max_iter, debug));
    return rcpp_result_gen;
END_RCPP
}
// softmax_mat
arma::mat softmax_mat(arma::mat x);
RcppExport SEXP _reservr_softmax_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(softmax_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// softmax_vec
std::vector<double> softmax_vec(arma::vec x);
RcppExport SEXP _reservr_softmax_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(softmax_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// dsoftmax_vec
arma::mat dsoftmax_vec(arma::vec x);
RcppExport SEXP _reservr_dsoftmax_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dsoftmax_vec(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_reservr_dist_mixture_density_free", (DL_FUNC) &_reservr_dist_mixture_density_free, 6},
    {"_reservr_dist_mixture_density_fixed", (DL_FUNC) &_reservr_dist_mixture_density_fixed, 7},
    {"_reservr_dist_mixture_probability_free", (DL_FUNC) &_reservr_dist_mixture_probability_free, 6},
    {"_reservr_dist_mixture_probability_fixed", (DL_FUNC) &_reservr_dist_mixture_probability_fixed, 7},
    {"_reservr_dist_mixture_iprobability_free", (DL_FUNC) &_reservr_dist_mixture_iprobability_free, 6},
    {"_reservr_dist_mixture_iprobability_fixed", (DL_FUNC) &_reservr_dist_mixture_iprobability_fixed, 7},
    {"_reservr_dist_erlangmix_density_free", (DL_FUNC) &_reservr_dist_erlangmix_density_free, 3},
    {"_reservr_dist_erlangmix_density_fixed_shape", (DL_FUNC) &_reservr_dist_erlangmix_density_fixed_shape, 4},
    {"_reservr_dist_erlangmix_density_fixed_scale", (DL_FUNC) &_reservr_dist_erlangmix_density_fixed_scale, 4},
    {"_reservr_dist_erlangmix_density_fixed_probs", (DL_FUNC) &_reservr_dist_erlangmix_density_fixed_probs, 4},
    {"_reservr_dist_erlangmix_density_fixed_probs_scale", (DL_FUNC) &_reservr_dist_erlangmix_density_fixed_probs_scale, 5},
    {"_reservr_dist_erlangmix_density_fixed_probs_shape", (DL_FUNC) &_reservr_dist_erlangmix_density_fixed_probs_shape, 5},
    {"_reservr_dist_erlangmix_density_fixed_scale_shape", (DL_FUNC) &_reservr_dist_erlangmix_density_fixed_scale_shape, 5},
    {"_reservr_dist_erlangmix_density_fixed_probs_scale_shape", (DL_FUNC) &_reservr_dist_erlangmix_density_fixed_probs_scale_shape, 5},
    {"_reservr_dist_erlangmix_probability_free", (DL_FUNC) &_reservr_dist_erlangmix_probability_free, 4},
    {"_reservr_dist_erlangmix_probability_fixed_shape", (DL_FUNC) &_reservr_dist_erlangmix_probability_fixed_shape, 5},
    {"_reservr_dist_erlangmix_probability_fixed_scale", (DL_FUNC) &_reservr_dist_erlangmix_probability_fixed_scale, 5},
    {"_reservr_dist_erlangmix_probability_fixed_probs", (DL_FUNC) &_reservr_dist_erlangmix_probability_fixed_probs, 5},
    {"_reservr_dist_erlangmix_probability_fixed_probs_scale", (DL_FUNC) &_reservr_dist_erlangmix_probability_fixed_probs_scale, 6},
    {"_reservr_dist_erlangmix_probability_fixed_probs_shape", (DL_FUNC) &_reservr_dist_erlangmix_probability_fixed_probs_shape, 6},
    {"_reservr_dist_erlangmix_probability_fixed_scale_shape", (DL_FUNC) &_reservr_dist_erlangmix_probability_fixed_scale_shape, 6},
    {"_reservr_dist_erlangmix_probability_fixed_probs_scale_shape", (DL_FUNC) &_reservr_dist_erlangmix_probability_fixed_probs_scale_shape, 6},
    {"_reservr_dist_erlangmix_iprobability_free", (DL_FUNC) &_reservr_dist_erlangmix_iprobability_free, 4},
    {"_reservr_dist_erlangmix_iprobability_fixed_shape", (DL_FUNC) &_reservr_dist_erlangmix_iprobability_fixed_shape, 5},
    {"_reservr_dist_erlangmix_iprobability_fixed_scale", (DL_FUNC) &_reservr_dist_erlangmix_iprobability_fixed_scale, 5},
    {"_reservr_dist_erlangmix_iprobability_fixed_probs", (DL_FUNC) &_reservr_dist_erlangmix_iprobability_fixed_probs, 5},
    {"_reservr_dist_erlangmix_iprobability_fixed_probs_scale", (DL_FUNC) &_reservr_dist_erlangmix_iprobability_fixed_probs_scale, 6},
    {"_reservr_dist_erlangmix_iprobability_fixed_probs_shape", (DL_FUNC) &_reservr_dist_erlangmix_iprobability_fixed_probs_shape, 6},
    {"_reservr_dist_erlangmix_iprobability_fixed_scale_shape", (DL_FUNC) &_reservr_dist_erlangmix_iprobability_fixed_scale_shape, 6},
    {"_reservr_dist_erlangmix_iprobability_fixed_probs_scale_shape", (DL_FUNC) &_reservr_dist_erlangmix_iprobability_fixed_probs_scale_shape, 6},
    {"_reservr_dgamma_matrix", (DL_FUNC) &_reservr_dgamma_matrix, 3},
    {"_reservr_pgamma_diff_matrix", (DL_FUNC) &_reservr_pgamma_diff_matrix, 4},
    {"_reservr_trunc_erlangmix_ellik", (DL_FUNC) &_reservr_trunc_erlangmix_ellik, 9},
    {"_reservr_do_integrate_gk_lst", (DL_FUNC) &_reservr_do_integrate_gk_lst, 7},
    {"_reservr_do_integrate_gk_mat", (DL_FUNC) &_reservr_do_integrate_gk_mat, 7},
    {"_reservr_softmax_mat", (DL_FUNC) &_reservr_softmax_mat, 1},
    {"_reservr_softmax_vec", (DL_FUNC) &_reservr_softmax_vec, 1},
    {"_reservr_dsoftmax_vec", (DL_FUNC) &_reservr_dsoftmax_vec, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_reservr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
